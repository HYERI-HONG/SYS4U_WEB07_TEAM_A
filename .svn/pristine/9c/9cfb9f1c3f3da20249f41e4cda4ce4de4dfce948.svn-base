package kr.sys4u.spring.instagram.web.controller.member;

import java.io.File;
import java.io.IOException;
import java.util.UUID;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.sys4u.spring.instagram.core.dto.member.Member;
import kr.sys4u.spring.instagram.core.dto.member.MemberImage;
import kr.sys4u.spring.instagram.core.service.member.MemberService;
import kr.sys4u.spring.instagram.web.controller.AbstractController;

@Controller
public class MemberController extends AbstractController{
	
	@Autowired
	MemberService memberService;
	
	//로그인
	@PostMapping("/memLogin.do")
	public String login(Model model, 
			@RequestParam("loginID") String loginID,
			@RequestParam("password") String password) {
		String result="";
		LOGGER.debug("ddddssssssssssssssssssss");
		Member preMember = memberService.getMemberById(loginID);
		if (preMember.getPassword().equals(password)) {
			model.addAttribute("message", "로그인 성공");
			 result="main/main";
			 //세션넘기기.
			 //세션끈겼을때 다시 로그인시 전 페이지 경로 기억?
			 //
		}else{
			model.addAttribute("message", "로그인 실패");
			result="member/login";
		}
		return result;
	}
	
	@GetMapping("/memJoinPage.do")
	public String join() {
		return "member/join";
	}
	
	@PostMapping("/memJoin.do")
	@Transactional
	public String insertMember(@RequestParam("loginID") String loginID,
			@RequestParam("password") String password,
			@RequestParam("message") String messageState,
			@RequestPart("memberImage") MultipartFile file) throws IllegalStateException, IOException {
		String uploadDir = environment.getProperty("fileupload-upload-dir");
		String[] seperator = file.getOriginalFilename().split("\\.");
		String saveName = UUID.randomUUID().toString();
		File destFile = new File(uploadDir, saveName);
		file.transferTo(destFile);
		
		Member member = new Member();
		member.setLoginID(loginID);
		member.setPassword(password);
		member.setMessage(messageState);
		int memberCount = memberService.memberInsert(member);
		
		Member preMember= memberService.getMemberById(loginID);
		MemberImage memberImage= new MemberImage();
		memberImage.setMemberNo(preMember.getNo());
		memberImage.setPath(uploadDir);
		memberImage.setName(saveName);
		memberImage.setExtension(seperator[1]);
		int memberImageCount = memberService.memberInsertImage(memberImage);
		
		return "member/login";
	}

	@RequestMapping(value="/idDupcheck.do", method=RequestMethod.POST, produces="application/json;charset=UTF-8")
	@ResponseBody
	public String process(@RequestParam("dupId") String dupId){
//		resp.setContentType("application/x-json; charset=UTF-8");
		String dupStat = memberService.dupCheck(dupId);
		return dupStat;
	}
	
	

}
